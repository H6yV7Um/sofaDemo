<?xml version="1.0" encoding="UTF-8"?>

<project name="sofademo-dalgen" default="release" basedir=".">
    <!-- define properties -->
    <property name="name" value="sofademo-dalgen"/>

    <loadproperties srcFile="db.properties"/>

    <!-- properties for directory -->
    <property name="dir.conf" value="${user.home}/.middlegen/conf"/>
    <property name="dir.lib" value="${user.home}/.middlegen/lib"/>
    <property name="dir.target" value="${basedir}/target"/>
    <property name="dir.deploy" value="${basedir}/../app/common/dal/src/main"/>

    <!-- properties for middlegen plugin -->
    <property name="middlegen.templates" value="templates"/>
    <property name="middlegen.destination" value="${dir.deploy}"/>
    <property name="middlegen.config.file" value="${basedir}/dal-config.xml"/>
    <property name="middlegen.package" value="com.alipay.sofademo.common.dal"/>
    <property name="middlegen.package.dir" value="com/alipay/sofademo/common/dal"/>

    <!-- insert database configuration here -->
    <property name="database.driver.file" value="${dir.lib}/ojdbc14.jar"/>
    <property name="database.driver.classpath" value="${database.driver.file}"/>
    <property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>

    <!--环境变量-->
    <property environment="env"/>

    <!-- classpath -->
    <path id="classpath.main">
        <pathelement path="${dir.conf}"/>
        <fileset dir="${dir.lib}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- compile middlegen plugin -->
    <target name="compile" depends="" description="">
        <mkdir dir="${dir.lib}"/>
        <mkdir dir="${dir.conf}"/>
        <copy todir="${dir.lib}">
            <fileset dir="${env.ANTX_HOME}/repository/alipay/thirdparty/dalgen_11">
                <include name="**/*.jar"/>
                <exclude name="**/*src.jar"/>
                <exclude name="**/*doc.jar"/>
            </fileset>
        </copy>
        <unjar src="${dir.lib}/alipay-tools-dalgen-1.1.2.jar" dest="${dir.conf}"/>
        <copy file="${dir.conf}/middlegen-plugin.xml" todir="${dir.conf}/META-INF"/>
    </target>

    <!-- sanity check (database driver must be available) -->
    <target name="check-driver-present">
        <available file="${database.driver.file}" type="file" property="driver.present"/>
    </target>
    <target name="panic-if-driver-not-present" unless="driver.present">
        <fail>
            JDBC驱动程序"${database.driver.file}"不存在
        </fail>
    </target>

    <!-- =================================================================== -->
    <!-- Run Middlegen                                                       -->
    <!-- =================================================================== -->
    <target name="middlegen" depends="compile,check-driver-present,panic-if-driver-not-present" description="">

        <taskdef name="middlegen" classname="middlegen.MiddlegenTask" classpathref="classpath.main"/>
        <echo message=""/>
        <input message="请输入目标表名,多表以逗号分隔,全表生成请输入'*',只生成Sequence请输入'seq': " addproperty="tabs"/>

        <echo message="DAL配置文件：{middlegen.config.file}."/>
        <echo message="开始自动生成DAL..."/>

        <mkdir dir="${middlegen.destination}"/>
        <middlegen configfile="${middlegen.config.file}" runModel="SOFA" tabs="${tabs}" appname="${name}"
                   databaseurl="${database.url}" driver="${database.driver}" username="${database.userid}"
                   password="${database.password}" schema="${database.schema}" prefsdir="${dir.target}">

            <iwallet destination="" mergedir="${middlegen.templates}/mergedir" package="${middlegen.package}">
                <!-- 生成数据对象(DataObject)基类 -->
                <!-- <fileproducer destination="${middlegen.destination}/java/${middlegen.package.dir}" template="${middlegen.templates}/base-do.vm" filename="dataobject/BaseDO.java" /> -->

                <!-- 为每一张表生成一个数据对象类 -->
                <fileproducer destination="${middlegen.destination}/java/${middlegen.package.dir}"
                              template="${middlegen.templates}/do.vm" filename="dataobject/{0}DO.java"/>

                <!-- 为每一张表生成一个DAO接口 -->
                <fileproducer destination="${middlegen.destination}/java/${middlegen.package.dir}"
                              template="${middlegen.templates}/dao.vm" filename="daointerface/{0}DAO.java"/>

                <!-- 为每一张表生成ibatis DAO实现 -->
                <fileproducer destination="${middlegen.destination}/java/${middlegen.package.dir}"
                              template="${middlegen.templates}/ibatis.vm" filename="ibatis/Ibatis{0}DAO.java"/>

                <!-- 生成访问sequence表的DAO接口
                <fileproducer destination="${middlegen.destination}/java/${middlegen.package.dir}" template="${middlegen.templates}/seq-dao.vm" filename="daointerface/SeqDAO.java" />
                -->
                <!-- 生成SequenceDAO的Ibatis实现
                <fileproducer destination="${middlegen.destination}/java/${middlegen.package.dir}" template="${middlegen.templates}/seq-ibatis.vm" filename="ibatis/IbatisSeqDAO.java" />
                -->
                <!--生成加解密工具类
                <fileproducer destination="${middlegen.destination}/java/${middlegen.package.dir}" template="${middlegen.templates}/methodutils.vm" filename="utils/{0}Utils.java" />
                -->

                <!-- 为每一张表生成一个sqlmapping文件 -->
                <fileproducer destination="${middlegen.destination}/resources"
                              template="${middlegen.templates}/table-sqlmap-mapping.vm"
                              filename="sqlmap/{0}-sqlmap-mapping.xml"/>

                <!-- 生成公共的sqlmapping文件 -->
                <fileproducer destination="${middlegen.destination}/resources"
                              template="${middlegen.templates}/common-sqlmap-mapping.vm"
                              filename="sqlmap/common-sqlmap-mapping.xml"/>

                <!-- 生成ibatis的配置文件-->
                <fileproducer destination="${middlegen.destination}/resources"
                              template="${middlegen.templates}/sqlmap.vm" filename="sqlmap/sqlmap.xml"/>

                <!-- 生成DAO beans的Spring配置文件 -->
                <fileproducer destination="${middlegen.destination}/resources/META-INF/spring"
                              template="${middlegen.templates}/beans-dal-dao.vm"
                              filename="sofademo-common-dal-dao.xml"/>
            </iwallet>
        </middlegen>
        <echo message="DAL生成已成功!"/>
    </target>

    <target name="clean-perf" depends="" description="">
        <mkdir dir="${dir.target}"/>
        <delete>
            <fileset dir="${dir.target}">
                <include name="**/*.properties"/>
            </fileset>
        </delete>
    </target>


    <target name="clean-middlegen" depends="" description="">
        <delete dir="${user.home}/.middlegen/lib"/>
        <delete dir="${user.home}/.middlegen/conf"/>
    </target>

    <target name="clean" depends="clean-perf,clean-middlegen" description="clean all generated stuff"/>

    <!-- The default target to use -->
    <target name="release" depends="clean,middlegen" description=""/>

    <!--如下为是否手动修改过自动生成mapping文件的检查工具-->
    <target name="clean-target" depends="" description="">
        <delete dir="${dir.target}"/>
    </target>

    <target name="prepare" description="">
        <script language="javascript">
            <![CDATA[
				//重新覆盖dalgen生成的路由，生成到target下
				middlegenDir = project.getProperty("basedir") + "/target/app/common/dal/src/main";		
				echo = project.createTask("echo");
				echo.setMessage("修改dalgen生成目录前: "+ project.getProperty("middlegen.destination"));
				echo.perform();
				project.setProperty("middlegen.destination", middlegenDir);
				echo.setMessage("修改dalgen生成目录后: "+ project.getProperty("middlegen.destination"));
				echo.perform();
				
				//设置为全表生成		
				project.setProperty("tabs", "*");
				echo.setMessage("设置默认默认为全表生成");
				echo.perform();
				]]>
        </script>
    </target>
    <!--系统自动生成dalgen文件检查，使用：ant check命令-->
    <target name="check" depends="prepare,clean-target,release" description="">
        <script language="javascript">
            <![CDATA[
				importClass(java.io.File);
				importClass(java.util.List);
				importClass(java.util.ArrayList);
				importClass(org.apache.tools.ant.types.Commandline);
				importClass(org.apache.tools.ant.taskdefs.condition.Os);
				
				
				//获取当前系统自动生成mapping文件的路径，如果获取失败，将直接报错
				var targets = project.getTargets();
				var middlegenTarget = targets.get("middlegen");
				var tasks = middlegenTarget.getTasks();
				var prePath = "";
				for(i=0;i<tasks.length;i++){				
					if(tasks[i].getTag().equals("middlegen")){	
						var iwallet = tasks[i].getChildren().get(0);//仅支持一个iwallet子标签
					
						var fileproducers =  iwallet.getChildren();
						
						for(j=0;j<fileproducers.size();j++){
							
							var fileproducerAttr = fileproducers.get(j).getWrapper().getAttributeMap();
							
							var template = fileproducerAttr.get("template");
							if(template.contains("table-sqlmap-mapping.vm")){
								var fileName = fileproducerAttr.get("filename");
								
								var lastSlashIndex = fileName.lastIndexOf("/");
								
								prePath = fileName.substring(0, lastSlashIndex);															
							}							
						}						
					}
				}				
				if("".equals(prePath)){
					fail = project.createTask("fail");
					fail.setMessage("未能查找到当前工程自动生成的mapping文件的路径，可以直接通过修改build.xml解决！");
					fail.perform();
				}
				
				//重新生成mapping文件的路径
				dir =project.getProperty("middlegen.destination") + "/resources/" + prePath;
				//当前工程中mapping文件的路径
				existDir = project.getProperty("dir.deploy") + "/resources/" + prePath;
				
				includes = "*.xml";
				
				//从当前重新生成的文件夹中循环比较每个文件
				fs = project.createDataType("fileset");
				fs.setDir( new File(dir) );
				fs.setIncludes(includes);
				ds = fs.getDirectoryScanner(project);
				srcFiles = ds.getIncludedFiles();
				var unmacthed = new Array();//匹配失败的文件列表				
				if(srcFiles.length>0){
					//iterate over that array
					for (i=0; i<srcFiles.length; i++) {

						var basedir  = fs.getDir(project);
						var filename = srcFiles[i];
										
						//创建新生成文件的checksum
						var genMD5 = "gen_md5_prefix_" + filename;
						genChecksum = project.createTask("checksum");
						genChecksum.setFile(new File( dir +  "/" + filename));
						genChecksum.setProperty(genMD5);
						genChecksum.perform();					

						//创建现在工程有mapping文件的checksum
						var existMD5 = "exist_md5_prefix_" + filename;
						existChecksum = project.createTask("checksum");
						existChecksum.setFile(new File( existDir +  "/" + filename));
						existChecksum.setProperty(existMD5);
						existChecksum.perform();	
						
						// create and use a Task via Ant API
						var existMD5Str = project.getProperty(existMD5);
						var genMD5Str = project.getProperty(genMD5)
						echo = project.createTask("echo");
						echo.setMessage( filename + " : "+ existMD5Str + " | " + genMD5Str);
						echo.perform();
						
						if(!existMD5Str.equals(genMD5Str)) {
							unmacthed.push(filename);
						}
					}
					  
					
					//匹配失败文件的处理，window：调用svn弹出比较框展示不同文件，其他系统则直接失败处理					
					if(unmacthed.length>0){
						echo = project.createTask("echo");
						echo.setMessage("不一致的文件列表: "+ unmacthed);
						echo.perform();
					
						if(Os.isFamily("windows")){
							for(i=0;i<unmacthed.length;i++){
								exec = project.createTask("exec");
								var filename = unmacthed[i];
								
								var cmd = new Commandline();
								cmd.setExecutable("TortoiseMerge");
								var args = ["/base:\"" + existDir +  "/" + filename + "\"","/basename:\"工程源文件:"+filename+"\"","/mine:\""  + dir +  "/" + filename+"\"","/minename:\"dalgen重新生成文件:" + filename + "\""];
								cmd.addArguments(args);
								exec.setCommand(cmd);
								exec.perform();
								
								//echo = project.createTask("echo");
								//echo.setMessage("命令行: "+ cmd);
								//echo.perform();					
							}			
						} else {
							fail = project.createTask("fail");
							fail.setMessage("存在不一致的文件");
							fail.perform();
						}
					} else {
						echo = project.createTask("echo");
						echo.setMessage("没有不一致的文件列表");
						echo.perform();
					}	
				} else {
					fail = project.createTask("fail");
					fail.setMessage("未能在["+existDir+"]查找到当前工程自动生成的mapping文件查找到工程的mapping文件");
					fail.perform();
				}
				
				]]>
        </script>
    </target>

</project>
